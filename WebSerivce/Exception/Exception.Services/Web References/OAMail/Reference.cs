//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.18444 版自动生成。
// 
#pragma warning disable 1591

namespace Exception.Service.OAMail {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="EmailServiceSoap", Namespace="CKMService.WebService")]
    public partial class EmailService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SendEmaiToOAOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFileToOAFullOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFileToOAPartlyOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public EmailService() {
            this.Url = global::Exception.Service.Properties.Settings.Default.Exception_Service_OAMail_EmailService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SendEmaiToOACompletedEventHandler SendEmaiToOACompleted;
        
        /// <remarks/>
        public event UploadFileToOAFullCompletedEventHandler UploadFileToOAFullCompleted;
        
        /// <remarks/>
        public event UploadFileToOAPartlyCompletedEventHandler UploadFileToOAPartlyCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CKMService.WebService/SendEmaiToOA", RequestNamespace="CKMService.WebService", ResponseNamespace="CKMService.WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendEmaiToOA(string Sender, string Receiver, string Summary, string Message, string AccId) {
            object[] results = this.Invoke("SendEmaiToOA", new object[] {
                        Sender,
                        Receiver,
                        Summary,
                        Message,
                        AccId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendEmaiToOAAsync(string Sender, string Receiver, string Summary, string Message, string AccId) {
            this.SendEmaiToOAAsync(Sender, Receiver, Summary, Message, AccId, null);
        }
        
        /// <remarks/>
        public void SendEmaiToOAAsync(string Sender, string Receiver, string Summary, string Message, string AccId, object userState) {
            if ((this.SendEmaiToOAOperationCompleted == null)) {
                this.SendEmaiToOAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendEmaiToOAOperationCompleted);
            }
            this.InvokeAsync("SendEmaiToOA", new object[] {
                        Sender,
                        Receiver,
                        Summary,
                        Message,
                        AccId}, this.SendEmaiToOAOperationCompleted, userState);
        }
        
        private void OnSendEmaiToOAOperationCompleted(object arg) {
            if ((this.SendEmaiToOACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendEmaiToOACompleted(this, new SendEmaiToOACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CKMService.WebService/UploadFileToOAFull", RequestNamespace="CKMService.WebService", ResponseNamespace="CKMService.WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadFileToOAFull(string fileName, string extName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] buff, string accid) {
            object[] results = this.Invoke("UploadFileToOAFull", new object[] {
                        fileName,
                        extName,
                        buff,
                        accid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFileToOAFullAsync(string fileName, string extName, byte[] buff, string accid) {
            this.UploadFileToOAFullAsync(fileName, extName, buff, accid, null);
        }
        
        /// <remarks/>
        public void UploadFileToOAFullAsync(string fileName, string extName, byte[] buff, string accid, object userState) {
            if ((this.UploadFileToOAFullOperationCompleted == null)) {
                this.UploadFileToOAFullOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFileToOAFullOperationCompleted);
            }
            this.InvokeAsync("UploadFileToOAFull", new object[] {
                        fileName,
                        extName,
                        buff,
                        accid}, this.UploadFileToOAFullOperationCompleted, userState);
        }
        
        private void OnUploadFileToOAFullOperationCompleted(object arg) {
            if ((this.UploadFileToOAFullCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFileToOAFullCompleted(this, new UploadFileToOAFullCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("CKMService.WebService/UploadFileToOAPartly", RequestNamespace="CKMService.WebService", ResponseNamespace="CKMService.WebService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadFileToOAPartly(string fileName, string extName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] buff, System.Guid attachid, string accid, bool isEnd) {
            object[] results = this.Invoke("UploadFileToOAPartly", new object[] {
                        fileName,
                        extName,
                        buff,
                        attachid,
                        accid,
                        isEnd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFileToOAPartlyAsync(string fileName, string extName, byte[] buff, System.Guid attachid, string accid, bool isEnd) {
            this.UploadFileToOAPartlyAsync(fileName, extName, buff, attachid, accid, isEnd, null);
        }
        
        /// <remarks/>
        public void UploadFileToOAPartlyAsync(string fileName, string extName, byte[] buff, System.Guid attachid, string accid, bool isEnd, object userState) {
            if ((this.UploadFileToOAPartlyOperationCompleted == null)) {
                this.UploadFileToOAPartlyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFileToOAPartlyOperationCompleted);
            }
            this.InvokeAsync("UploadFileToOAPartly", new object[] {
                        fileName,
                        extName,
                        buff,
                        attachid,
                        accid,
                        isEnd}, this.UploadFileToOAPartlyOperationCompleted, userState);
        }
        
        private void OnUploadFileToOAPartlyOperationCompleted(object arg) {
            if ((this.UploadFileToOAPartlyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFileToOAPartlyCompleted(this, new UploadFileToOAPartlyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SendEmaiToOACompletedEventHandler(object sender, SendEmaiToOACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendEmaiToOACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendEmaiToOACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UploadFileToOAFullCompletedEventHandler(object sender, UploadFileToOAFullCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFileToOAFullCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFileToOAFullCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UploadFileToOAPartlyCompletedEventHandler(object sender, UploadFileToOAPartlyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFileToOAPartlyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFileToOAPartlyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591